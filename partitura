#Notes
https://github.com/geikha/hyper-hydra?tab=readme-ov-file 
//que replique pantalla

##intro

imatges de la partitura en el github.
(connectant en la nanokontrol)[https://github.com/ojack/hydra-standalone/blob/master/docs/midi.md]


1 - PROGRAMA

a.show()
//s0.initScreen()
s0.initCam()
s1.initImage("https://raw.githubusercontent.com/magdaarques/bach/main/bach_fuga_00.jpg")
s2.initImage("https://raw.githubusercontent.com/magdaarques/bach/main/bach_fuga_01.jpg")
s3.initImage("https://raw.githubusercontent.com/magdaarques/bach/main/bach_fuga_03.jpg")

//intro captura applicació text edit en el programa llançat desde obs en app oberta. Text edit en el programa llançat desde obs en app oberta.

src(s0)
  .modulateScrollX(noise(3).shift(0,0.05).pixelate(8,8),0.1)
  .modulateScrollY(noise(10).thresh(0,0.05).pixelate(8,8),0.1)
  .layer(src(s0).invert( ).contrast(()=>(cc[0]*6.28)-3.14).mask(osc(1,2,10)).scale(1,22/16/(5/3))).modulate(o0, ()=>(cc[1]*6.28),() => a.fft[0] * 1.3)
  .out(o0)
render(o0)

2 - IMATGES
s0.initCam(0)
s1.initCam(2)

src(s1).out(o0)
src(s0).modulateScrollX(noise(3).shift(0,0.05).pixelate(8,8),0.1)
  .modulateScrollY(noise(10,()=>(cc[2]*6.28)).thresh(0,0.05).pixelate(8,8),0.1)
  .layer(src(s1).invert().contrast(()=>(cc[0]*6.28)-3.14)
         .mask(osc(1,2,10)).scale(1,22/16/(5/3))).modulate(o0, ()=>(cc[1]*6.28),()=>a.fft[0]*1.3)
  .out(o1)
render(o1)


3 - CÀMERA SOROLL ONA

//camera 
s0.initCam(1)
osc([3,5,6,7], 0.9, 0.001)
    .kaleid([3,4,5,7,8,9,10].ease(0.1))
    .color(()=>a.fft[0]* .1, ()=>a.fft[0]* [0.1,.5,.8])
    .colorama(0.4)
    .rotate(()=>a.fft[0]* -0.001 )
    .modulateRotate(s0,()=>a.fft[1] * 0.003)
    .modulate(s0, 0.9,()=>Math.sin(time)*.10)
    .modulateScale(o0,0.9)
    .out(o0)

4 - COLOR BY CAMERA

s0.initCam()
src(o0).modulateHue(src(o0).scale(1.01),1).layer(src(s0).modulate(o0,()=>cc[16]).posterize(100).colorama(()=>cc[17]).mask(shape([3,4,5,6,7,8].smooth(),()=>cc[18],()=>cc[19]))).out(o0)
render(o0)

5 - SCAN i REPEAT
s0.initCam(0)

src(s0).saturate(20).thresh(()=>a.fft[0]*.2).colorama(()=>cc[19],()=>cc[20]).layer(src(o1).mask(shape(999,2).scale(()=>a.fft[0]*1.1,0.7).repeat([2,5,10,20,50].smooth(),[2,5,10,20,50].smooth()).scrollX(1,-0.25)).scrollX(0.001)).modulate(o0,()=>cc[21],.4,.2,.5).out(o0)
src(o0).modulate(o1,()=>cc[17].smooth(),()=>cc[18].smooth()).invert([0,1]).g(()=>cc[16]).out(o1)

src(o0).modulate(o1,8,7).color([0,0,1],[1,0,0],[0,1,0]).invert([0,1]).out(o1)
render(o1)

6 - SCAN I NOISE
s0.initCam(1)
noise(6,.2,1).out(o0)
src(s0).thresh(()=>a.fft[0]*.8).out(o1)
src(o1).modulate(o1,10,.2).layer(src(o2).diff(o1)).scale(1.01).luma(.81,.04).modulateHue(o0).out(o2)
render(o2)

7 - KALEID
s0.initCam(0)
noise(6,2,1).out(o0)
src(s0).thresh(()=>a.fft[0]*.018).out(o1)
src(o1).modulate(o1,10,.2).layer(src(o2).diff(o1)).scale(1.01).luma(.81,.04).out(o2)
src(o2).modulateHue(noise(4,-0.85,0)).kaleid(()=>a.fft[0]*7.09).scrollX(1.01,-1).color([0,1,0],[1,0,0],[0,0,1]).out(o3)
render(o3)

8- VEU
osc(6,.3,()=>cc[0]*10)
	//.luma(()=>cc[3].smooth()/10)
	//.shift(.5)
  	.modulateRotate(src(s0).repeat(2,()=>cc[4]), ()=>a.fft[0])
  .out(o0)

osc(()=>cc[21],()=>cc[22]/.05.ease(),()=>cc[23]*10)
  	.kaleid([3,4,5,6],.8)
	.modulate(src(o0),()=>cc[16]*10, ()=>cc[17]*12)
	.scale(()=>cc[3]*.2)
	.repeatX(()=>Math.sin(time)*.5)
	.out(o1)

src(o1)
	.modulate(s0,5,10).diff(s0,()=>a.fft[1]*.5)
		.saturate(() => Math.sin(time) * 10 )
  	.out(o2)

src(o1)
	.modulateRotate(o0,2,time/.8 + (time))
	.colorama(()=>cc[19], ()=>cc[20])
  	.modulateScrollX(o0,()=>cc[6])	
  .out(o3)
render()
