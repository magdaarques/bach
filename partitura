#Notes
https://github.com/geikha/hyper-hydra?tab=readme-ov-file 
//que replique pantalla

##intro

imatges de la partitura en el github.
(connectant en la nanokontrol)[https://github.com/ojack/hydra-standalone/blob/master/docs/midi.md]


1 - PROGRAMA

a.show()
//s0.initScreen()
s0.initCam()
s1.initImage("https://raw.githubusercontent.com/magdaarques/bach/main/bach_fuga_00.jpg")
s2.initImage("https://raw.githubusercontent.com/magdaarques/bach/main/bach_fuga_01.jpg")
s3.initImage("https://raw.githubusercontent.com/magdaarques/bach/main/bach_fuga_03.jpg")

//intro captura applicació text edit en el programa llançat desde obs en app oberta. Text edit en el programa llançat desde obs en app oberta.

src(s0)
  .modulateScrollX(noise(3).shift(0,0.05).pixelate(8,8),0.1)
  .modulateScrollY(noise(10).thresh(0,0.05).pixelate(8,8),0.1)
  .layer(src(s0).invert( ).contrast(()=>(cc[0]*6.28)-3.14).mask(osc(1,2,10)).scale(1,22/16/(5/3))).modulate(o0, ()=>(cc[1]*6.28),() => a.fft[0] * 1.3)
  .out(o0)
render(o0)

2 - IMATGES



3 - CÀMERA SOROLL ONA

//camera 
s0.initCam(1)
osc([3,5,6,7], 0.9, 0.001)
    .kaleid([3,4,5,7,8,9,10].ease(0.1))
    .color(()=>a.fft[0]* .1, ()=>a.fft[0]* [0.1,.5,.8])
    .colorama(0.4)
    .rotate(()=>a.fft[0]* -0.001 )
    .modulateRotate(s0,()=>a.fft[1] * 0.003)
    .modulate(s0, 0.9,()=>Math.sin(time)*.10)
    .modulateScale(o0,0.9)
    .out(o0)

4 - COLOR BY CAMERA

s0.initCam()
src(o2).modulateHue(src(o2).scale(1.01),1).layer(src(s0).modulate(o0,.2).posterize(100).colorama(.3,.4).mask(shape(4,.2,.002))).out(o2)

5 - SCAN i REPEAT
s0.initCam(0)
src(s0).saturate(2).thresh(()=>a.fft[0]*2).contrast(1.3).layer(src(o0).mask(shape(4,2).scale(()=>a.fft[0]*1.1,0.7).repeat(10,2).scrollX(0.25)).scrollX(0.001)).modulate(o0,0.001,.4,.2,.5).out(o0)

src(o0).modulate(o1,8,7).color([0,0,1],[1,0,0],[0,1,0]).invert([0,1]).out(o1)
render(o1)

6 - SCAN I NOISE
s0.initCam(1)
noise(6,.2,1).out(o0)
src(s0).thresh(()=>a.fft[0]*.8).out(o1)
src(o1).modulate(o1,10,.2).layer(src(o2).diff(o1)).scale(1.01).luma(.81,.04).modulateHue(o0).out(o2)
render(o2)

7 - KALEID
s0.initCam(0)
noise(6,2,1).out(o0)
src(s0).thresh(()=>a.fft[0]*.018).out(o1)
src(o1).modulate(o1,10,.2).layer(src(o2).diff(o1)).scale(1.01).luma(.81,.04).out(o2)
src(o2).modulateHue(noise(4,-0.85,0)).kaleid(()=>a.fft[0]*7.09).scrollX(1.01,-1).color([0,1,0],[1,0,0],[0,0,1]).out(o3)
render(o3)
